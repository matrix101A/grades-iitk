{"version":3,"sources":["App.js","index.js"],"names":["App","useState","course","setCourse","year","setYear","sem","setSem","data","setData","Message","type","errorMessage","setMessage","useEffect","className","onSubmit","e","preventDefault","flattenedGrades","temp","console","log","name","value","onChange","event","target","undefined","Grades","A","B","C","D","F","Total","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sxuhCA4FeA,MAxFf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGSJ,mBAAS,IAHlB,mBAGNK,EAHM,KAGDC,EAHC,OAIWN,mBAAS,IAJpB,mBAINO,EAJM,KAIAC,EAJA,OAKsBR,mBAAS,CAAES,QAAS,GAAIC,KAAM,UALpD,mBAKNC,EALM,KAKQC,EALR,KA0Cb,OAnCAC,qBAAU,eAoCR,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,aAAf,UACE,gEACA,kFACA,sFACA,6DACA,gEACA,mFACA,mBAAGA,UAAWH,EAAaD,KAA3B,SAAkCC,EAAaF,aAGjD,uBAAMM,SAhCW,SAACC,GAEpB,GADAA,EAAEC,iBACGC,EAAgBf,GAIrB,GAAKe,EAAgBf,GAAME,GAI3B,GAAKa,EAAgBf,GAAME,GAAKJ,GAAhC,CAIAW,EAAW,CAAEH,QAAS,UAAWC,KAAM,QAEvC,IAAIS,EAAOD,EAAgBf,GAAME,GAAKJ,GACtCO,EAAQW,GACRC,QAAQC,IAAId,QAPVK,EAAW,CAAEH,QAAS,eAAgBC,KAAM,eAJ5CE,EAAW,CAAEH,QAAS,YAAaC,KAAM,eAJzCE,EAAW,CAAEH,QAAS,aAAcC,KAAM,WA6B1C,UACE,sBAAKI,UAAU,eAAf,UACE,4CACA,uBAAOJ,KAAK,OAAOY,KAAK,OAAOC,MAAOpB,EAAMqB,SAhD/B,SAACC,GACpB,IAAIN,EAAOM,EAAMC,OAAOH,MACxBnB,EAAQe,GACRC,QAAQC,IAAIlB,MA+CN,uBACA,0CACA,uBAAOO,KAAK,OAAOY,KAAK,MAAMC,MAAOlB,EAAKmB,SA/C9B,SAACC,GACnB,IAAIN,EAAOM,EAAMC,OAAOH,MACxBjB,EAAOa,MA+CD,uBACA,gDACA,uBACET,KAAK,OACLY,KAAK,SACLC,MAAOtB,EACPuB,SAnDa,SAACC,GACtB,IAAIN,EAAOM,EAAMC,OAAOH,MACxBrB,EAAUiB,MAmDJ,0BAEF,uBAAOT,KAAK,SAASa,MAAM,cAE7B,gCACE,0CAAwBI,IAAhBpB,EAAKqB,OAAuBrB,EAAKqB,OAAOC,EAAI,MACpD,0CAAwBF,IAAhBpB,EAAKqB,OAAuBrB,EAAKqB,OAAOE,EAAI,MACpD,0CAAwBH,IAAhBpB,EAAKqB,OAAuBrB,EAAKqB,OAAOG,EAAI,MACpD,0CAAwBJ,IAAhBpB,EAAKqB,OAAuBrB,EAAKqB,OAAOI,EAAI,MACpD,0CAAwBL,IAAhBpB,EAAKqB,OAAuBrB,EAAKqB,OAAOK,EAAI,MACpD,8CAA4BN,IAAhBpB,EAAKqB,OAAuBrB,EAAKqB,OAAOM,MAAQ,SAE9D,8DClFNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.51b19b44.chunk.js","sourcesContent":["import \"./App.css\";\nimport flattenedGrades from \"./flattenedGrades.json\";\nimport React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [course, setCourse] = useState(\"\");\n  const [year, setYear] = useState(\"\");\n  const [sem, setSem] = useState(\"\");\n  const [data, setData] = useState({});\n  const [errorMessage, setMessage] = useState({ Message: \"\", type: \"error\" });\n\n  useEffect(() => {});\n\n  const onYearChange = (event) => {\n    let temp = event.target.value;\n    setYear(temp);\n    console.log(year);\n  };\n  const onSemChange = (event) => {\n    let temp = event.target.value;\n    setSem(temp);\n  };\n  const onCourseChange = (event) => {\n    let temp = event.target.value;\n    setCourse(temp);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!flattenedGrades[year]) {\n      setMessage({ Message: \"Wrong Year\", type: \"error\" });\n      return;\n    }\n    if (!flattenedGrades[year][sem]) {\n      setMessage({ Message: \"Wrong Sem\", type: \"error\" });\n      return;\n    }\n    if (!flattenedGrades[year][sem][course]) {\n      setMessage({ Message: \"Wrong Course\", type: \"error\" });\n      return;\n    }\n    setMessage({ Message: \"Success\", type: \"suc\" });\n\n    let temp = flattenedGrades[year][sem][course];\n    setData(temp);\n    console.log(data);\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1>Exclusive content for B2 Wing </h1>\n        <p>note -E grades if given are missing in this list </p>\n        <p>do follow the instruction else the website WILL crash</p>\n        <p>Write year in format yyyy-yy</p>\n        <p>Sem values can be either 1 or 2</p>\n        <p>Write the course no in Block letters (eg- ESC201A)</p>\n        <p className={errorMessage.type}>{errorMessage.Message}</p>\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-content\">\n          <label>Year : </label>\n          <input type=\"text\" name=\"year\" value={year} onChange={onYearChange} />\n\n          <br />\n          <label>Sem :</label>\n          <input type=\"text\" name=\"sem\" value={sem} onChange={onSemChange} />\n\n          <br />\n          <label>Course no :</label>\n          <input\n            type=\"text\"\n            name=\"number\"\n            value={course}\n            onChange={onCourseChange}\n          />\n          <br />\n        </div>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      <div>\n        <h1>A -{data.Grades !== undefined ? data.Grades.A : \"\"}</h1>\n        <h1>B -{data.Grades !== undefined ? data.Grades.B : \"\"}</h1>\n        <h1>C -{data.Grades !== undefined ? data.Grades.C : \"\"}</h1>\n        <h1>D -{data.Grades !== undefined ? data.Grades.D : \"\"}</h1>\n        <h1>F -{data.Grades !== undefined ? data.Grades.F : \"\"}</h1>\n        <h1>Total -{data.Grades !== undefined ? data.Grades.Total : \"\"}</h1>\n      </div>\n      <div> Made by Abhinav Tiwari</div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}